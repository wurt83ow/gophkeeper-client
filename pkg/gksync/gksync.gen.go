// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT _EDIT.
package gksync

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	"github.com/wurt83ow/gophkeeper-client/pkg/appcontext"
)

// +++
var ErrNetworkUnavailable = errors.New("network unavailable")

//---

// PostAddDataTableUserIDEntryIDJSONBody defines parameters for PostAddDataTableUserIDEntryID.
type PostAddDataTableUserIDEntryIDJSONBody map[string]string

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	Password string `json:"password,omitempty"`
	Username string `json:"username,omitempty"`
}

// PostRegisterJSONBody defines parameters for PostRegister.
type PostRegisterJSONBody struct {
	Password string `json:"password,omitempty"`
	Username string `json:"username,omitempty"`
}

// PutUpdateDataTableUserIDEntryIDJSONBody defines parameters for PutUpdateDataTableUserIDEntryID.
type PutUpdateDataTableUserIDEntryIDJSONBody map[string]string

// PostAddDataTableUserIDEntryIDJSONRequestBody defines body for PostAddDataTableUserIDEntryID for application/json ContentType.
type PostAddDataTableUserIDEntryIDJSONRequestBody PostAddDataTableUserIDEntryIDJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody PostRegisterJSONBody

// PutUpdateDataTableUserIDEntryIDJSONRequestBody defines body for PutUpdateDataTableUserIDEntryID for application/json ContentType.
type PutUpdateDataTableUserIDEntryIDJSONRequestBody PutUpdateDataTableUserIDEntryIDJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAddDataTableUserIDEntryIDWithBody request with any body
	PostAddDataTableUserIDEntryIDWithBody(ctx context.Context, table string, userID int, entryID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAddDataTableUserIDEntryID(ctx context.Context, table string, userID int, entryID string, body PostAddDataTableUserIDEntryIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeleteDataTableUserIDEntryID request
	DeleteDeleteDataTableUserIDEntryID(ctx context.Context, table string, userID int, entryID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGetAllDataTableUserID request
	GetGetAllDataTableUserID(ctx context.Context, table string, userID int, lastSync time.Time, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGetDataTableUserIDEntryID request
	GetGetDataTableUserIDEntryID(ctx context.Context, table string, userID int, entryID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGetFileUserIDEntryID request
	GetGetFileUserIDEntryID(ctx context.Context, userID int, entryID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGetPasswordUsername request
	GetGetPasswordUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGetUserIDUsername request
	GetGetUserIDUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLoginWithBody request with any body
	PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegisterWithBody request with any body
	PostRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegister(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendFileUserIDWithBody request with any body
	PostSendFileUserIDWithBody(ctx context.Context, userID int, fileName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUpdateDataTableUserIDEntryIDWithBody request with any body
	PutUpdateDataTableUserIDEntryIDWithBody(ctx context.Context, table string, userID int, entryID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUpdateDataTableUserIDEntryID(ctx context.Context, table string, userID int, entryID string, body PutUpdateDataTableUserIDEntryIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAddDataTableUserIDEntryIDWithBody(ctx context.Context, table string, userID int, entryID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddDataTableUserIDEntryIDRequestWithBody(c.Server, table, userID, entryID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	// +++
	err = c.addTokenToHeader(ctx, req)
	if err != nil {
		return nil, err
	}
	// ---
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

func (c *Client) PostAddDataTableUserIDEntryID(ctx context.Context, table string, userID int, entryID string, body PostAddDataTableUserIDEntryIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddDataTableUserIDEntryIDRequest(c.Server, table, userID, entryID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeleteDataTableUserIDEntryID(ctx context.Context, table string, userID int, entryID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeleteDataTableUserIDEntryIDRequest(c.Server, table, userID, entryID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	// +++
	err = c.addTokenToHeader(ctx, req)
	if err != nil {
		return nil, err
	}
	// ---
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGetAllDataTableUserID(ctx context.Context, table string, userID int, lastSync time.Time, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGetAllDataTableUserIDRequest(c.Server, table, userID, lastSync)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	// +++
	err = c.addTokenToHeader(ctx, req)
	if err != nil {
		return nil, err
	}
	// ---
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

func (c *Client) GetGetDataTableUserIDEntryID(ctx context.Context, table string, userID int, entryID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGetDataTableUserIDEntryIDRequest(c.Server, table, userID, entryID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGetFileUserIDEntryID(ctx context.Context, userID int, entryID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGetFileUserIDEntryIDRequest(c.Server, userID, entryID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	// +++
	err = c.addTokenToHeader(ctx, req)
	if err != nil {
		return nil, err
	}
	// ---
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGetPasswordUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGetPasswordUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGetUserIDUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGetUserIDUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegister(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendFileUserIDWithBody(ctx context.Context, userID int, fileName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendFileUserIDRequestWithBody(c.Server, userID, fileName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	// +++
	err = c.addTokenToHeader(ctx, req)
	if err != nil {
		return nil, err
	}
	// ---

	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUpdateDataTableUserIDEntryIDWithBody(ctx context.Context, table string, userID int, entryID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUpdateDataTableUserIDEntryIDRequestWithBody(c.Server, table, userID, entryID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	// +++
	err = c.addTokenToHeader(ctx, req)
	if err != nil {
		return nil, err
	}
	// ---
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUpdateDataTableUserIDEntryID(ctx context.Context, table string, userID int, entryID string, body PutUpdateDataTableUserIDEntryIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUpdateDataTableUserIDEntryIDRequest(c.Server, table, userID, entryID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAddDataTableUserIDEntryIDRequest calls the generic PostAddDataTableUserIDEntryID builder with application/json body
func NewPostAddDataTableUserIDEntryIDRequest(server string, table string, userID int, entryID string, body PostAddDataTableUserIDEntryIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAddDataTableUserIDEntryIDRequestWithBody(server, table, userID, entryID, "application/json", bodyReader)
}

// NewPostAddDataTableUserIDEntryIDRequestWithBody generates requests for PostAddDataTableUserIDEntryID with any type of body
func NewPostAddDataTableUserIDEntryIDRequestWithBody(server string, table string, userID int, entryID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table", runtime.ParamLocationPath, table)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryID", runtime.ParamLocationPath, entryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addData/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDeleteDataTableUserIDEntryIDRequest generates requests for DeleteDeleteDataTableUserIDEntryID
func NewDeleteDeleteDataTableUserIDEntryIDRequest(server string, table string, userID int, entryID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table", runtime.ParamLocationPath, table)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryID", runtime.ParamLocationPath, entryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deleteData/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGetAllDataTableUserIDRequest generates requests for GetGetAllDataTableUserID
func NewGetGetAllDataTableUserIDRequest(server string, table string, userID int, lastSync time.Time) (*http.Request, error) {
	var err error

	var pathParam0 string
	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table", runtime.ParamLocationPath, table)
	if err != nil {
		return nil, err
	}

	var pathParam1 string
	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string
	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "lastSyncStr", runtime.ParamLocationPath, lastSync.Format(time.RFC3339))
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getAllData/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGetDataTableUserIDEntryIDRequest generates requests for GetGetDataTableUserIDEntryID
func NewGetGetDataTableUserIDEntryIDRequest(server string, table string, userID int, entryID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table", runtime.ParamLocationPath, table)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryID", runtime.ParamLocationPath, entryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getData/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGetFileUserIDEntryIDRequest generates requests for GetGetFileUserIDEntryID
func NewGetGetFileUserIDEntryIDRequest(server string, userID int, entryID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entryID", runtime.ParamLocationPath, entryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getFile/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGetPasswordUsernameRequest generates requests for GetGetPasswordUsername
func NewGetGetPasswordUsernameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getPassword/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGetUserIDUsernameRequest generates requests for GetGetUserIDUsername
func NewGetGetUserIDUsernameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getUserID/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLoginRequest calls the generic PostLogin builder with application/json body
func NewPostLoginRequest(server string, body PostLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLoginRequestWithBody generates requests for PostLogin with any type of body
func NewPostLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRegisterRequest calls the generic PostRegister builder with application/json body
func NewPostRegisterRequest(server string, body PostRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRegisterRequestWithBody generates requests for PostRegister with any type of body
func NewPostRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendFileUserIDRequestWithBody generates requests for PostSendFileUserID with any type of body
func NewPostSendFileUserIDRequestWithBody(server string, userID int, fileName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string
	var pathParam1 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileName", runtime.ParamLocationPath, fileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sendFile/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutUpdateDataTableUserIDEntryIDRequest calls the generic PutUpdateDataTableUserIDEntryID builder with application/json body
func NewPutUpdateDataTableUserIDEntryIDRequest(server string, table string, userID int, entryID string, body PutUpdateDataTableUserIDEntryIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUpdateDataTableUserIDEntryIDRequestWithBody(server, table, userID, entryID, "application/json", bodyReader)
}

// NewPutUpdateDataTableUserIDEntryIDRequestWithBody generates requests for PutUpdateDataTableUserIDEntryID with any type of body
func NewPutUpdateDataTableUserIDEntryIDRequestWithBody(server string, table string, userID int, entryID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "table", runtime.ParamLocationPath, table)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryID", runtime.ParamLocationPath, entryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/updateData/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAddDataTableUserIDEntryIDWithBodyWithResponse request with any body
	PostAddDataTableUserIDEntryIDWithBodyWithResponse(ctx context.Context, table string, userID int, entryID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAddDataTableUserIDEntryIDResponse, error)

	PostAddDataTableUserIDEntryIDWithResponse(ctx context.Context, table string, userID int, entryID string, body PostAddDataTableUserIDEntryIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAddDataTableUserIDEntryIDResponse, error)

	// DeleteDeleteDataTableUserIDEntryIDWithResponse request
	DeleteDeleteDataTableUserIDEntryIDWithResponse(ctx context.Context, table string, userID int, entryID string, reqEditors ...RequestEditorFn) (*DeleteDeleteDataTableUserIDEntryIDResponse, error)

	// GetGetAllDataTableUserIDWithResponse request
	GetGetAllDataTableUserIDWithResponse(ctx context.Context, table string, userID int, lastSync time.Time, reqEditors ...RequestEditorFn) (*GetGetAllDataTableUserIDResponse, error)

	// GetGetDataTableUserIDEntryIDWithResponse request
	GetGetDataTableUserIDEntryIDWithResponse(ctx context.Context, table string, userID int, entryID string, reqEditors ...RequestEditorFn) (*GetGetDataTableUserIDEntryIDResponse, error)

	// GetGetFileUserIDEntryIDWithResponse request
	GetGetFileUserIDEntryIDWithResponse(ctx context.Context, userID int, entryID string, reqEditors ...RequestEditorFn) (*GetGetFileUserIDEntryIDResponse, error)

	// GetGetPasswordUsernameWithResponse request
	GetGetPasswordUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetGetPasswordUsernameResponse, error)

	// GetGetUserIDUsernameWithResponse request
	GetGetUserIDUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetGetUserIDUsernameResponse, error)

	// PostLoginWithBodyWithResponse request with any body
	PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	// PostRegisterWithBodyWithResponse request with any body
	PostRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error)

	PostRegisterWithResponse(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error)

	// PostSendFileUserIDWithBodyWithResponse request with any body
	PostSendFileUserIDWithBodyWithResponse(ctx context.Context, userID int, fileName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendFileUserIDResponse, error)

	// PutUpdateDataTableUserIDEntryIDWithBodyWithResponse request with any body
	PutUpdateDataTableUserIDEntryIDWithBodyWithResponse(ctx context.Context, table string, userID int, entryID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUpdateDataTableUserIDEntryIDResponse, error)

	PutUpdateDataTableUserIDEntryIDWithResponse(ctx context.Context, table string, userID int, entryID string, body PutUpdateDataTableUserIDEntryIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUpdateDataTableUserIDEntryIDResponse, error)
}

type PostAddDataTableUserIDEntryIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAddDataTableUserIDEntryIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAddDataTableUserIDEntryIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeleteDataTableUserIDEntryIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDeleteDataTableUserIDEntryIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeleteDataTableUserIDEntryIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGetAllDataTableUserIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]string
}

// Status returns HTTPResponse.Status
func (r GetGetAllDataTableUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGetAllDataTableUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGetDataTableUserIDEntryIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetGetDataTableUserIDEntryIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGetDataTableUserIDEntryIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGetFileUserIDEntryIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGetFileUserIDEntryIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGetFileUserIDEntryIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGetPasswordUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetGetPasswordUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGetPasswordUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGetUserIDUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
}

// Status returns HTTPResponse.Status
func (r GetGetUserIDUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGetUserIDUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token  *string `json:"token,omitempty"`
		UserID *int    `json:"userID,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendFileUserIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSendFileUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendFileUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUpdateDataTableUserIDEntryIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUpdateDataTableUserIDEntryIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUpdateDataTableUserIDEntryIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAddDataTableUserIDEntryIDWithBodyWithResponse request with arbitrary body returning *PostAddDataTableUserIDEntryIDResponse
func (c *ClientWithResponses) PostAddDataTableUserIDEntryIDWithBodyWithResponse(ctx context.Context, table string, userID int, entryID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAddDataTableUserIDEntryIDResponse, error) {
	rsp, err := c.PostAddDataTableUserIDEntryIDWithBody(ctx, table, userID, entryID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddDataTableUserIDEntryIDResponse(rsp)
}

func (c *ClientWithResponses) PostAddDataTableUserIDEntryIDWithResponse(ctx context.Context, table string, userID int, entryID string, body PostAddDataTableUserIDEntryIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAddDataTableUserIDEntryIDResponse, error) {
	rsp, err := c.PostAddDataTableUserIDEntryID(ctx, table, userID, entryID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddDataTableUserIDEntryIDResponse(rsp)
}

// DeleteDeleteDataTableUserIDEntryIDWithResponse request returning *DeleteDeleteDataTableUserIDEntryIDResponse
func (c *ClientWithResponses) DeleteDeleteDataTableUserIDEntryIDWithResponse(ctx context.Context, table string, userID int, entryID string, reqEditors ...RequestEditorFn) (*DeleteDeleteDataTableUserIDEntryIDResponse, error) {
	rsp, err := c.DeleteDeleteDataTableUserIDEntryID(ctx, table, userID, entryID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeleteDataTableUserIDEntryIDResponse(rsp)
}

// GetGetAllDataTableUserIDWithResponse request returning *GetGetAllDataTableUserIDResponse
func (c *ClientWithResponses) GetGetAllDataTableUserIDWithResponse(ctx context.Context, table string, userID int, lastSync time.Time, reqEditors ...RequestEditorFn) (*GetGetAllDataTableUserIDResponse, error) {
	rsp, err := c.GetGetAllDataTableUserID(ctx, table, userID, lastSync, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGetAllDataTableUserIDResponse(rsp)
}

// GetGetDataTableUserIDEntryIDWithResponse request returning *GetGetDataTableUserIDEntryIDResponse
func (c *ClientWithResponses) GetGetDataTableUserIDEntryIDWithResponse(ctx context.Context, table string, userID int, entryID string, reqEditors ...RequestEditorFn) (*GetGetDataTableUserIDEntryIDResponse, error) {
	rsp, err := c.GetGetDataTableUserIDEntryID(ctx, table, userID, entryID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGetDataTableUserIDEntryIDResponse(rsp)
}

// GetGetFileUserIDEntryIDWithResponse request returning *GetGetFileUserIDEntryIDResponse
func (c *ClientWithResponses) GetGetFileUserIDEntryIDWithResponse(ctx context.Context, userID int, entryID string, reqEditors ...RequestEditorFn) (*GetGetFileUserIDEntryIDResponse, error) {
	rsp, err := c.GetGetFileUserIDEntryID(ctx, userID, entryID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGetFileUserIDEntryIDResponse(rsp)
}

// GetGetPasswordUsernameWithResponse request returning *GetGetPasswordUsernameResponse
func (c *ClientWithResponses) GetGetPasswordUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetGetPasswordUsernameResponse, error) {
	rsp, err := c.GetGetPasswordUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGetPasswordUsernameResponse(rsp)
}

// GetGetUserIDUsernameWithResponse request returning *GetGetUserIDUsernameResponse
func (c *ClientWithResponses) GetGetUserIDUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetGetUserIDUsernameResponse, error) {
	rsp, err := c.GetGetUserIDUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGetUserIDUsernameResponse(rsp)
}

// PostLoginWithBodyWithResponse request with arbitrary body returning *PostLoginResponse
func (c *ClientWithResponses) PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

func (c *ClientWithResponses) PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

// PostRegisterWithBodyWithResponse request with arbitrary body returning *PostRegisterResponse
func (c *ClientWithResponses) PostRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error) {
	rsp, err := c.PostRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostRegisterWithResponse(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error) {
	rsp, err := c.PostRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterResponse(rsp)
}

// PostSendFileUserIDWithBodyWithResponse request with arbitrary body returning *PostSendFileUserIDResponse
func (c *ClientWithResponses) PostSendFileUserIDWithBodyWithResponse(ctx context.Context, userID int, fileName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendFileUserIDResponse, error) {
	rsp, err := c.PostSendFileUserIDWithBody(ctx, userID, fileName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendFileUserIDResponse(rsp)
}

// PutUpdateDataTableUserIDEntryIDWithBodyWithResponse request with arbitrary body returning *PutUpdateDataTableUserIDEntryIDResponse
func (c *ClientWithResponses) PutUpdateDataTableUserIDEntryIDWithBodyWithResponse(ctx context.Context, table string, userID int, entryID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUpdateDataTableUserIDEntryIDResponse, error) {
	rsp, err := c.PutUpdateDataTableUserIDEntryIDWithBody(ctx, table, userID, entryID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUpdateDataTableUserIDEntryIDResponse(rsp)
}

func (c *ClientWithResponses) PutUpdateDataTableUserIDEntryIDWithResponse(ctx context.Context, table string, userID int, entryID string, body PutUpdateDataTableUserIDEntryIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUpdateDataTableUserIDEntryIDResponse, error) {
	rsp, err := c.PutUpdateDataTableUserIDEntryID(ctx, table, userID, entryID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUpdateDataTableUserIDEntryIDResponse(rsp)
}

// ParsePostAddDataTableUserIDEntryIDResponse parses an HTTP response from a PostAddDataTableUserIDEntryIDWithResponse call
func ParsePostAddDataTableUserIDEntryIDResponse(rsp *http.Response) (*PostAddDataTableUserIDEntryIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAddDataTableUserIDEntryIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteDeleteDataTableUserIDEntryIDResponse parses an HTTP response from a DeleteDeleteDataTableUserIDEntryIDWithResponse call
func ParseDeleteDeleteDataTableUserIDEntryIDResponse(rsp *http.Response) (*DeleteDeleteDataTableUserIDEntryIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeleteDataTableUserIDEntryIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGetAllDataTableUserIDResponse parses an HTTP response from a GetGetAllDataTableUserIDWithResponse call
func ParseGetGetAllDataTableUserIDResponse(rsp *http.Response) (*GetGetAllDataTableUserIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGetAllDataTableUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGetDataTableUserIDEntryIDResponse parses an HTTP response from a GetGetDataTableUserIDEntryIDWithResponse call
func ParseGetGetDataTableUserIDEntryIDResponse(rsp *http.Response) (*GetGetDataTableUserIDEntryIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGetDataTableUserIDEntryIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGetFileUserIDEntryIDResponse parses an HTTP response from a GetGetFileUserIDEntryIDWithResponse call
func ParseGetGetFileUserIDEntryIDResponse(rsp *http.Response) (*GetGetFileUserIDEntryIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGetFileUserIDEntryIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGetPasswordUsernameResponse parses an HTTP response from a GetGetPasswordUsernameWithResponse call
func ParseGetGetPasswordUsernameResponse(rsp *http.Response) (*GetGetPasswordUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGetPasswordUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGetUserIDUsernameResponse parses an HTTP response from a GetGetUserIDUsernameWithResponse call
func ParseGetGetUserIDUsernameResponse(rsp *http.Response) (*GetGetUserIDUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGetUserIDUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLoginResponse parses an HTTP response from a PostLoginWithResponse call
func ParsePostLoginResponse(rsp *http.Response) (*PostLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token  *string `json:"token,omitempty"`
			UserID *int    `json:"userID,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRegisterResponse parses an HTTP response from a PostRegisterWithResponse call
func ParsePostRegisterResponse(rsp *http.Response) (*PostRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSendFileUserIDResponse parses an HTTP response from a PostSendFileUserIDWithResponse call
func ParsePostSendFileUserIDResponse(rsp *http.Response) (*PostSendFileUserIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendFileUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutUpdateDataTableUserIDEntryIDResponse parses an HTTP response from a PutUpdateDataTableUserIDEntryIDWithResponse call
func ParsePutUpdateDataTableUserIDEntryIDResponse(rsp *http.Response) (*PutUpdateDataTableUserIDEntryIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUpdateDataTableUserIDEntryIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// addTokenToHeader добавляет JWT-токен в заголовок запроса
func (c *Client) addTokenToHeader(ctx context.Context, req *http.Request) error {
	// Извлеките JWT-токен из контекста
	token, ok := appcontext.GetJWTToken(ctx)
	if !ok {
		return fmt.Errorf("не удалось получить JWT-токен из контекста")
	}

	// Добавьте JWT-токен в заголовок Authorization
	req.Header.Add("Authorization", token)

	return nil
}
